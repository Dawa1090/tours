{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "codeChallenge",
  "steps": [
    {
      "title": "Introduction",
      "description": "In this tour we will be walking through a complete code challenge solution, carefully mapping the requirements in the README to the implementation in the code."
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Always start by reading all instructions completely",
      "line": 1
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "We can see from this line that we'll be working with the data present in this db.json file. Let's familiarize ourselves with the data we will be interacting with.",
      "line": 7
    },
    {
      "file": "cc/duck-manager/db.json",
      "description": "We can tell by the square bracket that \"ducks\" will be an array",
      "line": 2
    },
    {
      "file": "cc/duck-manager/db.json",
      "description": "Each item in the array is an object with the following fields. Make sure you understand each one before moving on",
      "line": 8
    },
    {
      "file": "cc/duck-manager/index.html",
      "description": "Next read though the provided HTML file. We will come back when needed, but it is good to know ahead of time what we are dealing with. If you haven't already, also open this file in a browswer.",
      "line": 1
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Let's start on the first deliverable. Read through it carefully.",
      "line": 11
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "We can see the word \"fetch\" here, that should give us a hint about the function will be using. And since it says \"ducks\" (a plural word), we know that we should be getting all items, not just one. We'll also make a note of the `duck-nav`, since that should be referring to something in the HTML file.",
      "line": 13
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Let's make sure we have defer in our script tag!",
      "line": 15
    },
    {
      "file": "cc/duck-manager/index.html",
      "description": "There it is, so we're good to go",
      "line": 5
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Let's start with the fetch request. Remember that we don't need extra parameters for a GET request, just the URL. And since the deliverable wants us to get ALL of the ducks, we have /ducks instead of /ducks/1 ",
      "line": 2
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "We get the json from the response as usual",
      "line": 3
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Remember what the json looks like in db.json: it's a list of objects (duck objects in our case). So we'll name the json data that we get `duckList`. Since it's a list, we can call `forEach` and iterate over the elements. Remember the deliverable: we want to add each duck image to the duck-nav. Let's take each duck object and pass it to a function that adds it to the proper place on the page called `addDuckToNav`",
      "line": 4
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Here is our function signature: we've defined a function `addDuckToNav` that takes a single duck (not a list of ducks!)",
      "line": 7
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "First let's actually get the duck-nav so that we will be able to add things to it later.",
      "line": 8
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "What do we want to add to the nav? An image. So let's first create an img element.",
      "line": 9
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Next we need to get the url from the duck object. We have to access the `img_url` field. ",
      "line": 10
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Next we set the src attribute of the img element we created to the duck image url we just extracted from the duck object",
      "line": 12
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Finally we append the img element to the nav, and this completes the first deliverable. Make sure you understood the process here before moving on",
      "line": 13
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Now read through deliverable two again (you did read it once at the beginning, right?) and make sure you understand what it is asking you to do.",
      "line": 17
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "This one is a bit more complicated than the first, so let's break it down:\n- We see something about doing something when a user clicks: that means we'll want to be calling `addEventListener` somewhere\n- We want to display data from the duck object that was clicked on inside the duck-display div.\nLet's take a look at this div to see what we'll have to do with it",
      "line": 19
    },
    {
      "file": "cc/duck-manager/index.html",
      "description": "We'll display duck.name here (make a note of the id)",
      "line": 19
    },
    {
      "file": "cc/duck-manager/index.html",
      "description": "And make a note of these other id's.",
      "line": 23
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Also the README gives us a nice example of what this div will look like if we did everything correctly",
      "line": 31
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "One last thing to note in this deliverable: every time a user clicks on a duck image, the duck-display div gets updated with that duck's info.",
      "line": 33
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Let's go ahead and add an event listener. Why are we adding it to `duckImgElement`? Because the deliverable says that something must happen every time the user clicks one of the images we added to the duck-nav",
      "line": 15
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "In these lines we are simply getting the relevant elements from the HTML document. Go take a look at the HTML again if you are confused as to where these strings are coming from. (Reminder: when we want to get an element by id with querySelector, we need to have the # symbol before the name)",
      "line": 18
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "First we set the src attribute of the img element that we selected.",
      "line": 20
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Next we set the text of the display name h2 element",
      "line": 21
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Finally we set the text of the button. Notice that we are including the \" Likes\" string so that the text isn't just a plain number. This concludes the second deliverable. Again, make sure you understand everything going on here before moving to the next one.",
      "line": 22
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "As before, reread the deliverable and understand what it wants to do.",
      "line": 35
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Ok, we see the word \"clicked\" again, so we'll be writing another event listener. It's going to change the value of a duck's likes by one (i.e. increment). We also want to ensure that the format is correct (it should be \"3 Likes\" not just \"3\"). Since we are told that our change must not be lost when we click a new duck, that tells us that it will not be enough to simply change the text of the HTML element, since it is overwritten by the previous event listener we wrote for deliverable two ",
      "line": 37
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "The deliverable says to add an event listener to the button, so that is exactly what we'll do here. Notice that we don't need to declare a parameter for the event, since we won't be using it.",
      "line": 24
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "This increments the likes in the current duck object. Why are we incrementing duck.likes instead of getting the button text and incrementing the number in the text? Because that number ultimately comes from duck.likes, so if we don't change duck.likes directly, then the change would be lost when we click on a different duck",
      "line": 25
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Finally, we have to actually update the text of the element with the new value. You'll notice this line is the same as above. This concludes the third deliverable",
      "line": 26
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Read over the last deliverable again before starting",
      "line": 39
    },
    {
      "file": "cc/duck-manager/README.md",
      "description": "Now we are getting into forms. Let's break it down:\n1. We need to get the form with querySelector\n2. We need to add a submit event listener to the form element\n3. We need to get the data from the form\n4. We need to use this data to create a new duck object\n5. We need to add this duck object to the duck-nav div\n\nThis may look like a lot, but actually we've already written a function for the last step!",
      "line": 41
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "This is the first step we outlined.",
      "line": 30
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "This is the next step. Notice that we need the `e` parameter this time.",
      "line": 31
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "As usual we call `preventDefault()` to prevent the page from reloading",
      "line": 32
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "Now we begin getting the form values. Notice that we have to use the bracket syntax instead of the dot syntax for getting the value. This is because Javascript doesn't allow us to say `e.target.duck-name-input` due to the dashes in the name. **THIS IS IMPORTANT**",
      "line": 33
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "In the same way we can get the URL that was entered ",
      "line": 34
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "We have the data, now let's make an object. Remember that creating an object starts with the curly braces {} and then has the key name, a colon, then the value. Each of these key-value pairs is separated by a comma. We've gotten the values we want from the form, so we can just put them in. Notice that we set likes to 0. This is because 0 is our _default value_ for likes.",
      "line": 39
    },
    {
      "file": "cc/duck-manager/src/index.js",
      "description": "As stated at the beginning of this deliverable, we've actually already defined a function to add a duck object to the duck-nav! We can just call this function and pass in the `newDuckObject` we just created. This concludes the code challenge! Don't worry if everything doesn't make sense right away, it may take several repetitions before it sticks",
      "line": 40
    }
  ]
}